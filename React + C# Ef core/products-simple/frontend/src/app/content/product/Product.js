import {useEffect, useState} from 'react';
import {
    Box,
    Paper,
    List,
    ListItem,
    ListItemText,
    Collapse,
    IconButton,
    Typography
} from '@mui/material';
import {ProductApi} from "./ProductApi";
import {ProductCreate} from "./ProductCreate";
import {ProductUpdate} from "./ProductUpdate";
import {ProductDelete} from "./ProductDelete";



function Product() {
    // –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞
    // —Ç–∞–∫–∂–µ —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    // –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ ProductApi.js

    // –¥–ª—è get –∑–∞–ø—Ä–æ—Å–∞
    const {data, error,loading,getAll} = ProductApi();
    useEffect(() => { // –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ Product
        getAll()
    },[]);


    const [selectedProductId, setSelectedProductId] = useState(null); // –≤—ã–±—Ä–∞–Ω–Ω—ã–π id
    const [selectedLevel, setSelectedLevel] = useState(null); // –≤—ã–±—Ä–∞–Ω–Ω—ã–π level
    const [parentId, setParentId] = useState(null); // parent_id
    const [createModalOpen, setCreateModalOpen] = useState(false); // –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ
    const [updateModalOpen, setUpdateModalOpen] = useState(false); // –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    const [deleteModalOpen, setDeleteModalOpen] = useState(false); // –æ—Ç–∫—Ä—ã—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ

    if (loading) return (<div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>)
    if (error) return (<div>{error.message}</div>)
    return (<div>
            <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
                <button onClick={() => {
                    setSelectedLevel(0);
                    setParentId(null);
                    setCreateModalOpen(true);
                }}>‚ûï</button>

            </div>
            {/*–ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞*/}
            <ProductCreate
            open={createModalOpen}
            onClose={() => setCreateModalOpen(false)}
            reload={getAll}
            level={selectedLevel}
            parent_id={parentId}
            />
            <ProductUpdate
            open={updateModalOpen}
            onClose={() => setUpdateModalOpen(false)}
            reload={getAll}
            id={selectedProductId}
            />
            <ProductDelete
            open={deleteModalOpen}
            onClose={() => setDeleteModalOpen(false)}
            reload={getAll}
            id={selectedProductId}
            />

            <Paper elevation={0} sx={{
                maxWidth: 800,
                margin: 'auto',
                border: '1px solid #e0e0e0',
                borderRadius: 2
            }}>

                {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞ */}
                <List>
                    {data.map(item => (
                        <TreeItem key={item.id} node={item}
                                  setSelectedLevel={setSelectedLevel}
                                  setParentId={setParentId}
                                  setCreateModalOpen={setCreateModalOpen}
                                  setSelectedProductId={setSelectedProductId}
                                  setUpdateModalOpen={setUpdateModalOpen}
                                  setDeleteModalOpen={setDeleteModalOpen}
                                  />
                    ))}
                </List>
            </Paper>
    </div>

    );
};

// –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞
// –ø–æ–ª—É—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
const TreeItem = ({ node, level = 0,
                      setSelectedLevel,
                      setCreateModalOpen,
                      setParentId,
                      setSelectedProductId,
                      setUpdateModalOpen,
                      setDeleteModalOpen

                  }) => {
    const [open, setOpen] = useState(false);
    const hasChildren = node.specifications && node.specifications.length > 0;
    const paddingLeft = level * 2 + 'rem';

    return (
        <>
            <ListItem
                sx={{
                    pl: paddingLeft,
                    borderBottom: '1px solid rgba(0,0,0,0.08)',
                    backgroundColor: level === 0 ? '#f9f9f9' : 'inherit'
                }}
            >
                {hasChildren && (
                    <IconButton
                        size="small"
                        onClick={() => setOpen(!open)}
                        sx={{ mr: 1 }}
                    >
                        {open ? '‚ñº' : '‚ñ∫'}
                    </IconButton>
                )}
                {!hasChildren && <Box width={32} sx={{ mr: 1 }} />} {/* –û—Ç—Å—Ç—É–ø –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}

                <ListItemText
                    primary={
                        <Typography variant={level === 0 ? 'subtitle1' : 'body1'}>
                            {node.name}
                        </Typography>
                    }
                    secondary={`ID: ${node.id}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${node.count}`}
                    sx={{ flexGrow: 1 }}
                />

                <Box>
                    <IconButton size="small" sx={{ color: 'text.secondary' }}
                                onClick={() => {
                                    setSelectedLevel(node.level+1);
                                    setParentId(node.id);
                                    setCreateModalOpen(true);
                                }}>
                        ‚ûï
                    </IconButton>
                    <IconButton size="small" sx={{ color: 'text.secondary' }}
                                onClick={() => {
                                    setSelectedProductId(node.id);
                                    setUpdateModalOpen(true);
                                }}>
                        ‚úèÔ∏è
                    </IconButton>
                    <IconButton size="small" sx={{ color: 'text.secondary' }}
                                onClick={() => {
                                    setSelectedProductId(node.id);
                                    setDeleteModalOpen(true);
                                }}>üóëÔ∏è</IconButton>
                </Box>
            </ListItem>

            {hasChildren && (
                <Collapse in={open} timeout="auto" unmountOnExit>
                    <List component="div" disablePadding>
                        {node.specifications.map(child => (
                            <TreeItem key={child.id} node={child} level={level + 1}
                                      setSelectedLevel={setSelectedLevel}
                                      setParentId={setParentId}
                                      setCreateModalOpen={setCreateModalOpen}
                                      setSelectedProductId={setSelectedProductId}
                                      setUpdateModalOpen={setUpdateModalOpen}
                                      setDeleteModalOpen={setDeleteModalOpen}
                            />
                        ))}
                    </List>
                </Collapse>
            )}
        </>
    );
};

export {Product}
